#ifndef PAGE_RESULT_H
#define PAGE_RESULT_H

const char page_result[] =
"<!DOCTYPE html>"
"<html>"
"<head>"
    "<title>ESP32 Management AP</title>"
"</head>"
"<body onLoad=\"getResult()\">"
    "<h3>Attack result:</h3>"
    "<div id=\"result\">Loading status...</div>"
    "<div id=\"content\"></div>"
    "<a href=\"/\">Back</a>"
    "<script>"
    "var poll = setInterval(getResult, 5000);"
    "function getResult() {"
        "var oReq = new XMLHttpRequest();"
        "oReq.onload = function() {"
            "var arrayBuffer = oReq.response;"
            "if(arrayBuffer) {"
                "var byteArray = new Uint8Array(arrayBuffer);"
                "var status = \"ERROR: Cannot parse attack state.\";"
                "switch(byteArray[0]) {"
                    "case 0:"
                        "status = \"READY\";"
                        "break;"
                    "case 1:"
                        "status = \"RUNNING\";"
                        "break;"
                    "case 2:"
                        "status = \"FINISHED\";"
                        "clearInterval(poll);"
                        "break;"
                    "case 3:"
                        "status = \"TIMEOUT\";"
                        "clearInterval(poll);"
                        "break;"
                    "default:"
                        "status = \"UNKNOWN\";"
                "}"
                "document.getElementById(\"result\").innerHTML = status + \"<br>\";"
                "type = \"ERROR: Cannot parse attack type.\";"
                "switch(byteArray[1]) {"
                    "case 0:"
                        "type = \"ATTACK_TYPE_PASSIVE\";"
                        "break;"
                    "case 1:"
                        "type = \"ATTACK_TYPE_HANDSHAKE\";"
                        "break;"
                    "case 2:"
                        "type = \"ATTACK_TYPE_PMKID\";"
                        "if(byteArray[2] > 0) {"
                            "for(let i = 0; i < byteArray[2]; i = i + 1) {"
                                "if((i % 16) == 0){"
                                    "document.getElementById(\"content\").innerHTML += \"<br>\";"
                                "}"
                                "document.getElementById(\"content\").innerHTML += byteArray[3 + i].toString(16);"
                            "}"
                        "}"
                        "break;"
                    "default:"
                        "type = \"UNKNOWN\";"
                "}"
                "document.getElementById(\"result\").innerHTML += type + \"<br>\";"
            "}"
        "};"
        "oReq.onerror = function() {"
            "document.getElementById(\"result\").innerHTML = \"ERROR: Request failed\";"
        "};"
        "oReq.open(\"GET\", \"get-result\", true);"
        "oReq.responseType = \"arraybuffer\";"
        "oReq.send();"
    "}"
    "</script>"
"</body>"
"</html>"
;
#endif

